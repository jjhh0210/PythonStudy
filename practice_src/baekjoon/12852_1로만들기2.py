'''
<문제>
1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
2. X가 2로 나누어 떨어지면, 2로 나눈다.
3. 1을 뺀다.
이 세가지 연산 적절히 사용해서 1만들기 -> 연산을 사용하는 횟수의 최솟값

<input>
자연수 N
<output>
횟수의 최솟값
1로 만들기 까지 과정 순서대로 (정답 여러개인 경우 암거나 ㄱㅊ)

1. 테이블
d[i] = i를 1로 만들기 위해 필요한 연산 회수 최솟값
s[i] = i에서 다음으로 가야할 최적의 수
2. 점화식
d[i] = 3으로 나눠지면 d[i//3], 2로 나눠지면 d[i//2], d[i-1] 중 가장 작은 것 + 1
3. 초기값
d[1] = 0

'''
import sys
input = sys.stdin.readline

n = int(input())
# 주어진 수 n까지의 테이블 채우기
d = [0]*1000001 # 최소 횟수
s = [0]*1000001
d[1] = 0
s[1] = 1    # s[i]=a 이란? i에서 a로 가는게 최적이라는 뜻, 즉 i는 a로부터 왔어~
for i in range(2,n+1):
    d[i],s[i] = d[i-1]+1, i-1  # -1인 경우

    if i%3==0 and d[i//3]+1<=d[i]:  #3으로 나누어지고 -1의 경우보다 더 좋거나 같을 경우
        d[i], s[i] = d[i//3]+1, i//3    # i의 경우엔 i//3으로 가는게 최적의 경로다~

    if i%2==0 and d[i//2]+1<=d[i]:          #2로 나누어지고, /3보다 더 좋거나 같을 경우
        d[i], s[i] = d[i//2]+1, i//2
print(d[n])
print(n,end=" ")
k = n
while k>1:
    print(s[k],end=" ")
    k=s[k]
# print()
# print(d[:n+1])
# print(s[:n+1])