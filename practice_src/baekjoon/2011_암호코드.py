'''
- 5000자리 이하의 암호(1~26 : A~Z)
- 암호를 글자로 바꿨을 때 나올 수 있는 가짓수 구하기 (1000000 으로 나눈 나머지)
- 암호 해석 불가 경우 0

<input>
25114 / 1111111111
<output>
6 / 89
-------------------------------
- d[i] = i번째 숫자까지 해석 가능한 경우의 수
i가
1) 1~9
- 앞에 11~26 and 뒤에 0 아님: 2자리수 and 1자리수 가능
- else (앞에 out of 11~26이면 1자리수만 됨, 뒤에 0이면 2자리수만 됨)
2) 0
- 암호가 정상인 경우: 0 앞에 1or 2가 나와서 10 or 20으로 동작할 때만 유효함!!(두자리수로 가능)
- 0 앞에 0, 3,4,5,6,7,8,9 일 경우 무조건 해석 불가!! ex) 302 -> 3 0 2 / 30 2 / 3 02 다 안됨

다시말해,
1) 2자리수 or 1자리수 가능한 경우 -> d[i] = d[i-1]+d[i-2]
- 0아님 and 앞포함 11~26(당연히 20은 아님) and 뒤에 0 아님
2) 두자리수만 가능한 경우 -> d[i] = d[i-1]
- 0임 and 앞에 1,2 (10, 20)
3) 한자리수만 가능한 경우 -> d[i] = d[i-1]
- 0아님 and 앞에 0 or 앞포함 27이상(27~99)
4) 암호 불가능한 경우 -> return 0
- 0임 and 앞에 (0,3~9)

'''
import sys
input = sys.stdin.readline

n = input().strip()
l = len(n)  # 자리수
n = "*"+n+"*"
ans = 1
if n[1]=="0":
    ans = 0
else:
    d = [0] * (l + 1)  # 1부터 시작!
    d[0], d[1] = 1, 1

    for i in range(2,l+1):
        if n[i]=="0":
            if n[i-1] in ("1","2"): # 앞에 1,2올때만 두자리 수로 가능 (10,20)
                d[i] = d[i-1]
            else:   # 00, 30~90 은 암호 해석 불가
                ans = 0
                break
        else:   # 0이 아님
            # 두자리수 & 한자리수 가능 : 앞포함 11~26 and 뒤에 0 아님
            if "11" <= n[i - 1:i + 1] <= "26" and n[i + 1] != "0":
                d[i] = d[i - 1] + d[i - 2]
            else:   # 아니면 한자리수만 되거나, 두자리수만 됨
                d[i] = d[i - 1]

    if ans==1:  # break 안됐다면
        ans = d[l]%1000000
print(ans)